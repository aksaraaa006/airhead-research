#summary Introduction to the code base, the basic functionality, and how it is packaged
#labels Featured

<wiki:toc max_depth="1" />

= Introduction =

The S-Space package attempts to provide a clean and reusable interface for using and building various semantic memory models.  To facilitate this, we have developed a number of useful interfaces and classes which do the most common work for you.  This document will outline which interfaces and classes are already provided and some guidance as to how to use them, along with the overall structure of the package.

= Organization =

Package layout is as follows:
{{{
user@machine$ ls
bin  build.xml	classes  data  javadoc	lib  reports  src  test
}}}

==`src`==
Source files can be found in {{{src/edu/ucla/sspace/}}} following the Java package naming convention.

==`bin`==
Stand alone `.jar` files can be generated by running:
{{{
user@machine$ ant dist
}}}
They will be generated in {{{bin}}}.

==`test`==
Unit test cases are provided for many classes, and are located under {{{test/edu/ucla/sspace/}}}. To run them, use ant:
{{{
user@machine$ ant test
}}}

==`javadoc`==
JavaDoc files are found in the {{{javadoc}}} directory. To generate these files, run:
{{{
user@machine$ ant javadoc
}}}

==custom models==
Each Semantic Space model is given it's own directory under {{{sspace/}}}, so that they can each be relatively self contained and be free to use other public package classes freely.  New models should follow this pattern by choosing a short abbreviation of the s-space.

==`common`==
Since many Semantic Space models should have a reasonable number of things in common, these things have been collected together and stored in the {{{sspace/common/}}} directory.  These will by far the most re-used classes in the package for those implementing their own semantic space model.

Common provides a mixture of several interfaces which make designing models easier, along with some already implemented sub-classes which fit particular use cases. 

The Utilities provided can broadly be split up into the following categories
   * `SemanticSpace` interface and utilities
   * `Matrix` interface and implementations
   * Similarity and Normalization implementations
   * Common useful data structures
   * the `SingularValueDecomposition` class
   * `Document` interface and implementations